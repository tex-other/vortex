;; Copyright (c) 1987 The Regents of the University of California.
;; All rights reserved.
;;
;; Permission is hereby granted, without written agreement and without
;; license or royalty fees, to use, copy, modify, and distribute this
;; software and its documentation for any purpose, provided that the
;; above copyright notice and the following two paragraphs appear in
;; all copies of this software.
;; 
;; IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
;; DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT
;; OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
;; CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;; THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
;; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
;; AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
;; ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
;; PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
;;
;; The above licensing information supersedes all licensing information
;; below.
;
;  RCS Info: $Header: help.vl,v 0.1 87/05/01 13:05:22 john Locked $
;
;  VorTeX - Visually Oriented TeX
;  A source-based WYSIWYG editor for beautiful documents
;
;  This file is part of the source editor/user interface written
;  by John Coker for the VorTeX project under the direction of
;  Prof. Michael A. Harrison of the University of California at
;  Berkeley.
;
;  Copyright (c) 1987 John L. Coker
;  University of California, Berkeley
;  john@renoir.Berkeley.EDU
;  vortex@renoir.Berkeley.EDU
;
;  This file intact and any code derived from it are copyright
;  John Coker and the Regents of the University of California.
;  All rights reserved by the author.  See the copyright notice
;  distributed with this software for a complete description of
;  the conditions under which it is made available.
;
;  help.vl - documentation string access functions
;

;
;  All output from help and apropos gets written on this
;  channel.  So, to make the write into a buffer, all we
;  need to do is bopen that buffer.
;
(setq help-out-chan stdout)

;
;  DOCUMENTATION
;
;  Name: help
;  Call: (help 'topic)
;  Retu: nil or t
;  Desc: This function finds the documentation whose name
;	exactly matches the given topic and prints it.  If
;	no documentation is found, nothing is printed and
;	the function returns nil.  Otherwise, the documentation
;	is format and printed and the function returns t.
;  Seea: apropos load-docstr-file
;

(defun help (topic)
  (cond ((eq (docstr-find-match topic) t)
	 (terpri)
	 (help-print-last)
	 t))
)

(defun help-print-last ()
  (let ((name (nth 0 docstr-last-match))
	(call (nth 1 docstr-last-match))
	(retu (nth 2 docstr-last-match))
	(desc (nth 3 docstr-last-match))
	(side (nth 4 docstr-last-match))
	(seea (nth 5 docstr-last-match))
	(pnext (lambda (list)
		 (cond ((not (eq list nil))
			(patom (car list) help-out-chan)
			(setq list (cdr list))
			(cond ((not (eq list nil))
			       (patom ", " help-out-chan)
			       (pnext list)))))))
	(pchar (lambda (code)
		 (cond ((eq code ?\n) (patom "\n    " help-out-chan))
		       (t (princ code help-out-chan))))))
    (patom (format "Name: %s\n" name) help-out-chan)
    (cond
     ((not (eq call "")) (patom (format "Usage: %s\n" call) help-out-chan)))
    (cond
     ((not (eq retu "")) (patom (format "Returns: %s\n" retu) help-out-chan)))
    (patom "Description:\n    " help-out-chan)
    (strmapc pchar desc)
    (terpri help-out-chan)
    (cond
     ((not (eq side "")) (patom "Side effects:\n    " help-out-chan)
      			 (strmapc pchar side)
			 (terpri help-out-chan)))
    (cond
     ((not (eq seea nil))
      (patom "See also: " help-out-chan)
      (pnext seea)
      (terpri help-out-chan))))
  (terpri help-out-chan)
)

;
;  DOCUMENTATION
;
;  Name: apropos
;  Call: (apropos 'pattern)
;  Retu: count
;  Desc: This function prints out documentation on all the topics
;	which match the argument regular expression pattern.  This
;	documentation is that generated automatically from C and
;	vlisp source to VorTeX by the \em{mkdoc} utility.  A count
;	of the number of matches found is returned.
;  Seea: help load-docstr-file
;

(defun apropos (pat)
  (interactive "sApropos of: ")
  (cond ((eq pat "") (error "Apropos argument must not be a null string.")))
  (let ((count 0))
    (cond
     ((eq (docstr-find-regexp pat) nil) 0)
     (t (terpri help-out-chan)
	(apropos-print-next 1))))
)

(defun apropos-print-next (count)
  (help-print-last)
  (cond
   ((eq (docstr-next-regexp) nil) count)
   (t (apropos-print-next (add 1 count))))
)
